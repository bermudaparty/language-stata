'scopeName': 'source.stata'
'name': 'Stata'
'fileTypes': [
  'do',
  'ado',
  'mata'
]
'foldingStartMarker': '\\{\\s*$'
'foldingStopMarker': '^\\s*\\}'
'patterns': [
  {
    'match': '(regexm)(\\()(.+),\\s*(\"|`\")(.+)(\"|\"\')(\\))'
    'captures':
      '1':
        'name': 'support.function.builtin.stata'
      '2':
        'name': 'punctuation.definition.parameters.begin.stata'
      '3':
        'patterns': [
          {
            'include': '#string-compound'
          }
          {
            'include': '#string-regular'
          }
          {
            'include': '#macro-local'
          }
          {
            'include': '#macro-global'
          }
          {
            'match': '[A-Za-z_][A-Za-z0-9_]{0,31}'
            'name': 'variable.parameter.function.stata'
          }
        ]
      '4':
        'name': 'punctuation.definition.string.begin.stata'
      '5':
        'patterns': [
          {'include': 'source.regexp.stata'}
        ]
      '6': 
        'name': 'punctuation.definition.string.end.stata'
      '7':
        'name': 'punctuation.definition.parameters.end.stata'
  }
  {
    'include': '#builtin_functions'
  }
  {
    'include': '#comments'
  }
  {
    'include': '#numbers'
  }
  {
    'include': '#operators'
  }
  {
    'include': '#macro-local'
  }
  {
    'include': '#macro-global'
  }
  {
    'include': '#string-compound'
  }
  {
    'include': '#string-regular'
  }
  {
    'include': '#illegal_names'
  }
  {
    'include': '#builtin_variables'
  }
  {
    'comment': 'highlight [_n], etc when subsetting variable'
    'begin': '[0-9a-zA-Z_]+(\\[)'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.parameters.begin.stata'
    'end': '(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.parameters.end.stata'
    'name': 'meta.function.stata'
    'patterns': [
      {
        'include': '#builtin_variables'
      }
      {
        'include': '#operators'
      }
      {
        'include': '#numbers'
      }
    ]
  }
  {
    'match': '\\b(gl(o|ob|oba|obal)?)\\s+\\b([A-Za-z_][A-Za-z0-9_]{0,31})\\b'
    'captures':
      '1':
        'name': 'storage.modifier.macro.stata'
      '3':
        'name': 'entity.name.type.class.stata'
}
  {
    'match': '\\b(loc(a|al)?|tempvar|tempname|tempfile)\\s+\\b([A-Za-z_][A-Za-z0-9_]{0,30})\\b'
    'captures':
      '1':
        'name': 'storage.modifier.macro.stata'
      '3':
        'name': 'entity.name.type.class.stata'
  }
  {
    'comment': 'keywords that delimit flow conditionals'
    'name': 'keyword.control.conditional.stata'
    'match': '\\b(if|else)\\b'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.flow.stata'
      '2':
        'name': 'entity.name.type.class.stata'
      '3':
        'name': 'keyword.control.flow.stata'
    'match': '\\b(foreach)\\s+([a-zA-Z0-9_]{1,31})\\s+(in|of loc(a|al)?|of glo(b|ba|bal)?|of var(l|li|lis|list)?|of new(l|li|lis|list)?|of num(l|li|lis|list)?)\\b'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.flow.stata'
      '2':
        'name': 'entity.name.type.class.stata'
      '3':
        'name': 'keyword.operator.assignment.stata'
    'match': '\\b(forvalues)\\s+([a-zA-Z0-9_]{1,31})\\s*(=)\\s*[0-9\\(\\)/:\. ]+\\s*\\{'
  }
  {
    'comment': 'keywords that delimit loops'
    'name': 'keyword.control.repeat.stata'
    'match': '\\b(while)\\b'
  }
  {
    'comment': 'keywords that alter flow from within a block'
    'name': 'keyword.control.statement.stata'
    'match': '\\b(continue)\\b'
  }
  {
    'captures':
      '1':
        'name': 'keyword.other.stata'
    'comment': 'keywords that haven\'t fit into other groups (yet).'
    'match': '\\b(as|ass|asse|asser|assert)\\b'
  }
  {
    'match': '\\b(by(s|so|sor|sort)?|statsby|rolling|bootstrap|jackknife|permute|simulate|svy|mi est(i|im|ima|imat|imate)?|nestreg|stepwise|xi|fp|mfp|vers(i|io|ion)?)\\b'
    'name': 'storage.type.function.stata'
    'comment': 'prefixes that require a colon'
  }
  {
  'comment': 'prefixes that don\'t need a colon'
  'name': 'keyword.control.flow.stata'
  'match': '\\b(qui(e|et|etl|etly)?|n(o|oi|ois|oisi|oisil|oisily)?|cap(t|tu|tur|ture)?)\\b:?'
  }
  {
    'match': '\\s*(program)\\s+((de(f|fi|fin|fine)?|di(r)?|drop|l(i|is|ist)?)?\\s+)?([A-Za-z_][A-Za-z0-9_]{0,31})'
    'captures':
      '1':
        'name': 'storage.type.function.stata'
      '2':
        'name': 'storage.type.function.stata'
      '7':
        'name': 'entity.name.function.stata'
  }
  {
    'match': '\\b(form(a|at)?)\\s*([A-Za-z_][A-Za-z0-9_]{0,31})*\\s*(%)(\-)?(0)?([0-9]+)(\.)([0-9]+)(e|f|g)(c)?'
    'captures':
      '1': 'keyword.functions.data.stata.test'
  }
  {
    'captures':
      '1':
        'name': 'keyword.functions.data.stata'
    'comment': 'miscellaneous to deal with later',
    'match': '\\b(sa(v|ve)|saveold|destring|tostring|note(s)?|format)\\b'
  }
  # Start manual functions:
  # Prefixes: 
  # # prefix commands: by (bysort) statsby rolling bootstrap jackknife permute simulate svy "mi estimate" nestreg stepwise xi fp mfp capture noisily quietly version 
  {
    'match': '\\b(g(e|en|ene|erer|enera|enerat|enerate)?)\\s+((byte|int|long|float|double|str[1-9]?[0-9]?[0-9]?[0-9]?|strL)?\\s+)?([A-Za-z_][A-Za-z0-9_]{0,31})'
    'captures':
      '1':
        'name': 'keyword.functions.data.stata'
      '3':
        'name': 'support.type.stata'
  }
  { 
    'match': '\\b(la(b|be|bel)?)\\s+(da(t|ta)?|var(i|ia|iab|iabl|iable)?|de(f|fi|fin|fine)?|val(u|ue|ues)?|di(r)?|l(i|is|ist)?|copy|drop|save|lang(u|ua|uag|uage)?)' 
    'captures': 
      '1': 
        'name': 'keyword.functions.data.stata' 
      '3': 
        'name': 'keyword.functions.data.stata' 
  } 
  { 
    'match': 
      '\\b(drop|keep)\\s+((if)\\s+(.+)\\s+(in)|(in)\\s+(.+)\\s+(if)|(if)|(in))?' 
    'captures': 
      '1': 
        'name': 'keyword.functions.data.stata' 
      '3': 
        'name': 'keyword.functions.data.stata' 
      '4': 
        'patterns': [ 
          { 
            'include': '$self' 
          } 
        ] 
      '5': 
        'name': 'keyword.functions.data.stata' 
      '6': 
        'name': 'keyword.functions.data.stata' 
      '7': 
        'patterns': [ 
          { 
            'include': '$self' 
          } 
        ] 
      '8': 
        'name': 'keyword.functions.data.stata' 
      '9': 
        'name': 'keyword.functions.data.stata' 
      '10': 
        'name': 'keyword.functions.data.stata' 
  }       
]
'repository':
  'builtin_functions':
    'begin': '\\b(bofd|Cdhms|Chms|Clock|clock|Cmdyhms|Cofc|cofC|Cofd|cofd|daily|date|day|dhms|dofb|dofC|dofc|dofh|dofm|dofq|dofw|dofy|dow|doy|halfyear|halfyearly|hh|hhC|hms|hofd|hours|mdy|mdyhms|minutes|mm|mmC|mofd|month|monthly|msofhours|msofminutes|msofseconds|qofd|quarter|quarterly|seconds|ss|ssC|tC|tc|td|th|tm|tq|tw|week|weekly|wofd|year|yearly|yh|ym|yofd|yq|yw|betaden|ibeta|ibetatail|invibeta|invibetatail|nbetaden|nibeta|invnibeta|binomialp|binomial|binomialtail|invbinomial|invbinomialtail|cauchyden|cauchy|cauchytail|invcauchy|invcauchytail|lncauchyden|chi2den|chi2|chi2tail|invchi2|invchi2tail|nchi2den|nchi2|nchi2tail|invnchi2|invnchi2tail|npnchi2|dunnettprob|invdunnettprob|exponentialden|exponential|exponentialtail|invexponential|invexponentialtail|Fden|F|Ftail|invF|invFtail|nFden|nF|nFtail|invnF|invnFtail|npnF|gammaden|gammap|gammaptail|invgammap|invgammaptail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|lnigammaden|hypergeometricp|hypergeometric|igaussianden|igaussian|igaussiantail|invigaussian|invigaussiantail|lnigaussianden|laplaceden|laplace|laplacetail|invlaplace|invlaplacetail|lnlaplaceden|logisticden|logisticden|logisticden|logistic|logistic|logistic|logistictail|logistictail|logistictail|invlogistic|invlogistic|invlogistic|invlogistictail|invlogistictail|invlogistictail|nbinomialp|nbinomial|nbinomialtail|invnbinomial|invnbinomialtail|normalden|normalden|normalden|normal|invnormal|lnnormalden|lnnormalden|lnnormalden|lnnormal|binormal|lnmvnormalden|poissonp|poisson|poissontail|invpoisson|invpoissontail|tden|t|ttail|invt|invttail|invnt|invnttail|ntden|nt|nttail|npnt|tukeyprob|invtukeyprob|weibullden|weibullden|weibull|weibull|weibulltail|weibulltail|invweibull|invweibull|invweibulltail|invweibulltail|weibullphden|weibullphden|weibullph|weibullph|weibullphtail|weibullphtail|invweibullph|invweibullph|invweibullphtail|invweibullphtail|lnwishartden|lniwishartden|abs|ceil|cloglog|comb|digamma|exp|floor|int|invcloglog|invlogit|ln|lnfactorial|lngamma|log|log10|logit|max|min|mod|reldif|round|sign|sqrt|sum|trigamma|trunc|cholesky|corr|diag|get|hadamard|I|inv|invsym|J|matuniform|nullmat|sweep|vec|vecdiag|coleqnumb|colnfreeparms|colnumb|colsof|det|diag0cnt|el|issymmetric|matmissing|mreldif|roweqnumb|rownfreeparms|rownumb|rowsof|trace|autocode|byteorder|c|chop|clip|cond|e|e|epsdouble|epsfloat|fileexists|fileread|filereaderror|filewrite|float|fmtwidth|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|smallestdouble|runiform|runiform|runiformint|rbeta|rbinomial|rcauchy|rchi2|rexponential|rgamma|rhypergeometric|rigaussian|rlaplace|rlogistic|rlogistic|rlogistic|rnbinomial|rnormal|rnormal|rnormal|rpoisson|rt|rweibull|rweibull|rweibullph|rweibullph|abbrev|char|uchar|collatorlocale|collatorversion|indexnot|plural|plural|real|regexm|regexr|regexs|ustrregexm|ustrregexrf|ustrregexra|ustrregexs|soundex|strcat|strdup|string|string|stritrim|strlen|ustrlen|udstrlen|strlower|ustrlower|strltrim|ustrltrim|strmatch|strofreal|strofreal|strpos|ustrpos|strproper|ustrtitle|strreverse|ustrreverse|strrpos|ustrrpos|strrtrim|ustrrtrim|strtoname|ustrtoname|strtrim|ustrtrim|strupper|ustrupper|subinstr|usubinstr|subinword|substr|usubstr|udsubstr|tobytes|uisdigit|uisletter|ustrcompare|ustrcompareex|ustrfix|ustrfrom|ustrinvalidcnt|ustrleft|ustrnormalize|ustrright|ustrsortkey|ustrsortkeyex|ustrto|ustrtohex|ustrunescape|word|ustrword|wordbreaklocale|wordcount|ustrwordcount|abbrev|char|indexnot|itrim|length|lower|ltrim|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|soundex|strcat|strdup|string|string|strmatch|strpos|strtoname|strtoname|subinstr|subinword|substr|trim|upper|word|wordcount|tin|twithin|acos|acosh|asin|asinh|atan|atan2|atanh|cos|cosh|sin|sinh|tan|tanh|mi)(\\()'
    'beginCaptures':
      '1':
        'name': 'support.function.builtin.stata'
      '2':
        'name': 'punctuation.definition.parameters.begin.stata'
    'end': '(\\))'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.parameters.end.stata'
    'patterns': [
      {
        'include': '#string-compound'
      }
      {
        'include': '#string-regular'
      }
      {
        'include': '#macro-local'
      }
      {
        'include': '#macro-global'
      }
      {
        'include': '#builtin_functions'
      }
      {
        'include': '#numbers'
      }
      {
        'match': '[A-Za-z_][A-Za-z0-9_]{0,31}'
        'name': 'variable.parameter.function.stata'
      }
    ]
  'builtin_types':
      'match': '\\b(byte|int|long|float|double|str[1-9]?[0-9]?[0-9]?[0-9]?|strL)\\b'
      'name': 'support.type.stata'
  'builtin_variables':
    'match': '\\b(_b|_coef|_cons|_n|_N|_rc|_se)\\b'
    'name': 'variable.object.stata'
  'comments':
    'patterns': [
      {
        'begin': '/\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.stata'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.stata'
        'name': 'comment.block.stata'
      }
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.stata'
        'match': '^\\s*(\\*).*$\\n?'
        'name': 'comment.line.star.stata'
        'comment': 'TODO! need to except out the occasion that a * comes after a /// on the previous line. May be easiest to join with the comment.line.triple-slash.stata below'
      }
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.stata'
        'match': '(///).*$\\n?'
        'name': 'comment.line.triple-slash.stata'
      }
      {
        'captures':
          '0':
            'name': 'punctuation.definition.comment.stata'
        'match': '(//).*$\\n?'
        'name': 'comment.line.double-slash.stata'
      }
    ]
  'macro-local':
    'patterns': [
      {
        'begin': '`(?!")'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.stata'
        'contentName': 'entity.name.type.class.stata'
        'end': '\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.stata'
        'patterns': [
          {
            'include': '#macro-local'
          }
          {
            'include': '#macro-global'
          }
        ]
      }
    ]
  'macro-global':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.string.begin.stata'
          '2':
            'name': 'punctuation.definition.string.begin.stata'
          '3':
            'name': 'entity.name.type.class.stata'
          '4':
            'name': 'punctuation.definition.string.end.stata'
        'match': '\\s*(\\$)(\\{?)([A-Za-z_][A-Za-z0-9_]{0,31})(\\}?)'
        'patterns': [
          {
            'include': '#macro-local'
          }
          {
            'include': '#macro-global'
          }
        ]
      }
    ]
  'numbers':
    'patterns': [
      {
        'match': '\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])'
        'name': 'constant.numeric.float.stata'
      }
      {
        'match': '(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))'
        'name': 'constant.numeric.float.stata'
      }
      {
        'match': '\\b(?i:(\\d+e[\\-\\+]?\\d+))'
        'name': 'constant.numeric.float.stata'
      }
      {
        'match': '\\b(?i:([1-9]+[0-9]*|0)L)'
        'name': 'constant.numeric.integer.long.decimal.stata'
      }
      {
        'match': '\\b([0-9]+|0)'
        'name': 'constant.numeric.integer.decimal.stata'
      }
    ]
  'operators':
    'patterns': [
      {
        'match': '\\+\\+|\\-\\-|\\+|\\-|\\*|\\^' 
        'name': 'keyword.operator.arithmetic.stata'
        'comment': '++ and -- must come first to support ligatures' 
      }
      {
        'comment': 'match division operator but not path separator'
        'match': '(?<![a-zA-Z.])/(?![a-zA-Z.]|$)'
        'name': 'keyword.operator.arithmetic.stata'
      }
      {
        'match': '\\&|\\|'
        'name': 'keyword.operator.logical.stata'
      }
      {
        'match': '(?:<=|>=|:=|==|!=|~=|<|>|=|!)' 
        'name': 'keyword.operator.comparison.stata'
      }
        'match': '\\(|\\)' 
        'name': 'keyword.operator.parentheses.stata' 
      } 
      {
        'match': '(##|#)'
        'name': 'keyword.operator.factor-variables.stata'
      }
      {
        'match': '%'
        'name': 'keyword.operator.format.stata'
      }
      {
        'match': ':'
        'name': 'punctuation.separator.key-value'
      }
    ]
  'string-compound':
    'patterns': [
      {
        'begin': '`"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.stata'
        'end': '"\''
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.stata'
        'name': 'string.quoted.double.compound.stata'
        'patterns': [
          { 
            'match': '"' 
            'name': 'string.quoted.double.compound.stata' 
            'comment': 'This must come before #string-regular and #string-compound to accurately color `"""\' in strings' 
          } 
          {
            'include': '#string-regular'
          }
          {
            'include': '#string-compound'
          }
          {
            'include': '#macro-local'
          }
          {
            'include': '#macro-global'
          }
        ]
      }
    ]
  'string-regular':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.stata'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.stata'
        'name': 'string.quoted.double.stata'
        'patterns': [
          {
            'include': '#macro-local'
          }
          {
            'include': '#macro-global'
          }
        ]
      }
    ]
  'generic_names':
      'match': '[A-Za-z_][A-Za-z0-9_]{0,31}'
  'illegal_names':
      'match':
       '\\bgen(e|er|era|erat|erate)?\\s((byte|int|long|float|double|str[1-9]?[0-9]?[0-9]?[0-9]?|strL)?\\s)?(_all|_b|byte|_coef|_cons|double|float|if|in|int|long|_n|_N|_pi|_pred|_rc|_skip|str[0-9]+|strL|using|with|[0-9][A-Za-z0-9_]+|[A-Za-z_][A-Za-z0-9_]{32,})\\b\\s*(///)?\\s*\\n?\\s*='
      'name': 'invalid.illegal.name.stata'
      'comment': 'highlights as illegal if variable name is more than 32 characters'
  'varlist':
    'match': ''
    'name': ''
# scratch
# prefix commands: by (bysort) statsby rolling bootstrap jackknife permute simulate svy "mi estimate" nestreg stepwise xi fp mfp capture noisily quietly version
