'scopeName': 'source.regexp.stata'
'comment': 'Match Stata\'s (limited) regular expression syntax.'
'fileTypes': [
    're'
]
'name': 'Regular Expressions (Stata)'
'foldingStartMarker': '(/\\*|\\{|\\()'
'foldingStopMarker': '(\\*/|\\}|\\))'
'patterns': [
  {
    'match': '\\^|\\$'
    'name': 'keyword.control.anchor.regexp'
  }
  {
    'match': '\\\\[1-9][0-9]?'
    'name': 'keyword.other.back-reference.regexp'
  }
  {
    'match': '[?+*]'
    'name': 'keyword.operator.quantifier.regexp'
  }
  {
    'match': '\\|'
    'name': 'keyword.operator.or.regexp'
  }
  {
    'match': '(\\()(\\?P=([a-zA-Z_][a-zA-Z_0-9]*\\w*))(\\))'
    'name': 'keyword.other.back-reference.named.regexp'
  }
  # regexm(find_type, "`regex'")
  {
    'begin': 'regexm\\([\w\"]+\s*,\s*(\"|\')'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.group.regexp'
    'end': '(\"|\')\\)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.group.regexp'
    'name': 'meta.group.assertion.regexp'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '(\\()(\\?\\(([1-9][0-9]?|[a-zA-Z_][a-zA-Z_0-9]*)\\))'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.group.regexp'
      '2':
        'name': 'punctuation.definition.group.assertion.conditional.regexp'
      '3':
        'name': 'entity.name.section.back-reference.regexp'
    'comment': 'we can make this more sophisticated to match the | character that separates yes-pattern from no-pattern, but it\'s not really necessary.'
    'end': '(\"|\')\\)'
    'name': 'meta.group.assertion.conditional.regexp'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '(\\()((\\?P<)([a-z]\\w*)(>)|(\\?:))?'
    'beginCaptures':
      '1':
        'name': 'punctuation.definition.group.regexp'
      '3':
        'name': 'punctuation.definition.group.capture.regexp'
      '4':
        'name': 'entity.name.section.group.regexp'
      '5':
        'name': 'punctuation.definition.group.capture.regexp'
      '6':
        'name': 'punctuation.definition.group.no-capture.regexp'
    'end': '(\"|\')\\)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.group.regexp'
    'name': 'meta.group.regexp'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'include': '#character-class'
  }
]
'repository':
  'character-class':
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.backslash.regexp'
      }
      {
        'begin': '(\\[)(\\^)?'
        'beginCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
          '2':
            'name': 'keyword.operator.negation.regexp'
        'end': '(\\])'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.character-class.regexp'
        'name': 'constant.other.character-class.set.regexp'
        'patterns': [
          {
            'include': '#character-class'
          }
          {
            'captures':
              '2':
                'name': 'constant.character.escape.backslash.regexp'
              '4':
                'name': 'constant.character.escape.backslash.regexp'
            'match': '((\\\\.)|.)\\-((\\\\.)|[^\\]])'
            'name': 'constant.other.character-class.range.regexp'
          }
        ]
      }
    ]
